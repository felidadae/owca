pipeline {
    triggers {
        cron('0 2,8,14,20 * * *')
    }
    agent any
    environment {
        PLAYBOOK = 'workloads/run_workloads.yaml'
        PROMETHEUS = 'http://100.64.176.12:9090'
        BUILD_COMMIT="${GIT_COMMIT}"
        EXTRA_ANSIBLE_PARAMS = " "
        LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\"}}"
        RUN_WORKLOADS_SLEEP_TIME = 300
        INVENTORY="tests/e2e/demo_scenarios/common/inventory.yaml"
        TAGS = "twemcache_mutilate,redis_rpc_perf,cassandra_stress,cassandra_ycsb,twemcache_rpc_perf,specjbb,stress_ng,tensorflow_benchmark_prediction,tensorflow_benchmark_train"
    }
    stages {
        stage('Wca metrics check') {
            failFast true
            parallel {
                stage('Kubernetes') {
                    agent { label 'kubernetes' }
                    environment {
                        KUBERNETES_HOST='100.64.176.34'
                        CRT_PATH = '/etc/kubernetes/ssl'
                        CONFIG = 'wca_config_kubernetes.yaml'
                        HOST_INVENTORY='tests/e2e/demo_scenarios/common/inventory-kubernetes.yaml'
                        CERT='true'
                    }
                    steps {
                        wca_and_workloads_check()
                    }
                    post {
                        always {
                            clean()
                        }
                    }
                }
                stage('Mesos') {
                    agent { label 'mesos' }
                    environment {
                        MESOS_MASTER_HOST='100.64.176.23'
                        MESOS_AGENT='100.64.176.14'
                        CONFIG = 'wca_config_mesos.yaml'
                        HOST_INVENTORY='tests/e2e/demo_scenarios/common/inventory-mesos.yaml'
                        CERT='false'
                    }
                    steps {
                        wca_and_workloads_check()
                    }
                    post {
                        always {
                            clean()
                        }
                    }
                }
            }
    }
}
}

def wca_and_workloads_check() {
    sh "make wca_package_in_docker"
    print('Reconfiguring wca...')
    copy_files("${WORKSPACE}/tests/e2e/demo_scenarios/common/${CONFIG}", "${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp")
    replace_in_config(CERT)
    copy_files("${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp", "/etc/wca/wca_config.yml", true)
    sh "sudo chown wca /etc/wca/wca_config.yml"
    copy_files("${WORKSPACE}/dist/wca.pex", "/usr/bin/wca.pex", true)
    copy_files("${WORKSPACE}/tests/e2e/demo_scenarios/common/wca.service", "/etc/systemd/system/wca.service", true)
    sh "sudo systemctl daemon-reload"
    start_wca()
    copy_files("${WORKSPACE}/${HOST_INVENTORY}", "${WORKSPACE}/${INVENTORY}")
    replace_commit()
    run_workloads("${EXTRA_ANSIBLE_PARAMS}", "${LABELS}")
    sleep RUN_WORKLOADS_SLEEP_TIME
    test_wca_metrics()
}

def clean() {
    stop_wca()
    stop_workloads("${EXTRA_ANSIBLE_PARAMS}")
    junit 'unit_results.xml'
}

def copy_files(src, dst, sudo=false) {
    if(sudo){
        sh "sudo cp -r ${src} ${dst}"
    }
    else{
        sh "cp -r ${src} ${dst}"
    }
}


def replace_commit() {
        contentReplace(
            configs: [
                fileContentReplaceConfig(
                    configs: [
                        fileContentReplaceItemConfig( search: 'BUILD_COMMIT', replace: "${GIT_COMMIT}", matchCount: 0),
                    ],
                    fileEncoding: 'UTF-8',
                    filePath: "${WORKSPACE}/tests/e2e/demo_scenarios/common/inventory.yaml")])
}

def replace_in_config(cert='false') {
    if(cert == 'true') {
        contentReplace(
            configs: [
                fileContentReplaceConfig(
                    configs: [
                        fileContentReplaceItemConfig( search: 'BUILD_COMMIT', replace: "${GIT_COMMIT}", matchCount: 0),
                        fileContentReplaceItemConfig( search: 'BUILD_NUMBER', replace: "${BUILD_NUMBER}", matchCount: 0),
                        fileContentReplaceItemConfig( search: 'CRT_PATH', replace: "${CRT_PATH}", matchCount: 0)
                    ],
                    fileEncoding: 'UTF-8',
                    filePath: "${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp")])
    }
    else {
        contentReplace(
            configs: [
                fileContentReplaceConfig(
                    configs: [
                        fileContentReplaceItemConfig( search: 'BUILD_COMMIT', replace: "${GIT_COMMIT}", matchCount: 0),
                        fileContentReplaceItemConfig( search: 'BUILD_NUMBER', replace: "${BUILD_NUMBER}", matchCount: 0)
                    ],
                    fileEncoding: 'UTF-8',
                    filePath: "${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp")])
    }
}


def start_wca() {
    print('Starting wca...')
    sh "sudo systemctl restart wca"
    sleep 5
    sh "sudo systemctl status wca"
}

def stop_wca() {
    print('Stopping wca...')
    sh "sudo systemctl stop wca"
    print('Stopped wca.')
}

def run_workloads(extra_params, labels) {
    dir('workloads') {
        print('Starting workloads...')
        sh '''ansible-playbook ${extra_params} -i ${WORKSPACE}/tests/e2e/demo_scenarios/run_workloads/inventory.yaml -i ${WORKSPACE}/${INVENTORY} --tags=${TAGS} -e "${LABELS}" ${WORKSPACE}/${PLAYBOOK}'''
    }
}

def stop_workloads(extra_params) {
   print('Stopping all workloads...')
   sh "ansible-playbook  ${extra_params}  -i ${WORKSPACE}/${INVENTORY} --tags=clean_jobs ${WORKSPACE}/${PLAYBOOK}"
   sleep 5 
}

def remove_file(path) {
    sh "sudo rm -f ${path}"
}

def test_wca_metrics() {
    sh "PYTHONPATH=. pipenv run pytest ${WORKSPACE}/tests/e2e/test_wca_metrics.py::test_wca_metrics --junitxml=unit_results.xml --log-level=debug --log-cli-level=debug -v"
}
