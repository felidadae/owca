# Copyright (c) 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


include('../common.aurora')

#----------------------------------------------------------------------------------------------------
###
# Params which can be modified by exporting environment variables.
###

communication_port = os.environ.get('communication_port', '9042')
threads = int(os.environ.get('threads') or 8)
#----------------------------------------------------------------------------------------------------

# For testing purpose set to small number as 1000
number_of_rows = 100000
cassandra_stress_cmd=('"while true; do cassandra-stress mixed duration=90s ' +
                     '-pop seq=1..%d -node %s -port native=%s -rate ' +
                     'threads=%d; done"') % (number_of_rows, application_host_ip,
                                           communication_port, threads)

jobs = [
  WorkloadService(
    task=SequentialTask(
      name=job_name,
      resources=Resources(cpu=cpu, ram=ram, disk=disk),
      processes=[
        # Wait until cassandra initialize itself.
        Process(
          name='wait_for_cassandra',
          cmdline="""
          set -x
          until nc -vz {cassandra_address} {communication_port}; do
            echo "$(date) Waiting for cassandra to initialize itself."
            sleep 3
          done
          """.format(cassandra_address=application_host_ip,
                     communication_port=communication_port),
        ),
        Process(
          name='cassandra_warmper',
          cmdline='cassandra-stress write n=%d -node %s -port native=%s -rate threads=14' % (
            number_of_rows, application_host_ip, communication_port
          ),
        ),
        Process(
          name='cassandra_stress_run',
          cmdline="/usr/bin/cassandra_stress_wrapper.pex --command '{cassandra_stress_cmd}' "
              "--metric_name_prefix 'cassandra_' "
              "--stderr 0 --kafka_brokers '{kafka_brokers}' --kafka_topic {kafka_topic} "
              "--log_level {log_level} "
              "--peak_load {peak_load} --load_metric_name {load_metric_name} "
              "--slo {slo} --sli_metric_name {sli_metric_name} "
              "--subprocess_shell "
              "--labels \"{labels}\"".format(
                cassandra_stress_cmd=cassandra_stress_cmd,
                kafka_brokers=wrapper_kafka_brokers,
                log_level=wrapper_log_level,
                kafka_topic=wrapper_kafka_topic,
                labels=wrapper_labels, 
                slo=slo, sli_metric_name="cassandra_p99",
                # @TODO peak_load should match cassandra_stress parameters
                peak_load=10000, load_metric_name="cassandra_qps"
              )
        )
      ],
    )
  )
]
